# -*- coding: utf-8 -*-
"""Do_an_tot_nghiep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gng9ycYX8QL9fxYixHi0Eabh2NGTjj9N
"""

#Thêm thư viện
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.utils import to_categorical

#Tải tập dữ liệu
(xTrain,yTrain),(xTest,yTest) = cifar10.load_data()

# Split training set into training and validation
from sklearn.model_selection import train_test_split
xTrain, xVal, yTrain, yVal = train_test_split(xTrain, yTrain, test_size=0.2, random_state=42) # Adjust test_size as needed

#Hiển thị thông tin dữ liệu
print ('xTrain shape : ',xTrain.shape)
print ('yTrain shape : ',yTrain.shape)
print ('xTest shape : ',xTest.shape)
print ('yTest shape : ',yTest.shape)
print ('xVal shape : ',xVal.shape)
print ('yVal shape : ',yVal.shape)

#In ra 1 hình ảnh bất kì
index = 0

xTrain [index]
image = plt.imshow( xTrain[index] )
print ('the target of image is : ',yTrain[index])

classification=['máy bay','ôtô','chim','mèo','nai','chó','ếch','ngựa','tàu','xe tải']

#Chuẩn hóa dữ liệu
x_train = xTrain / 255
x_test = xTest / 255
x_val = xVal / 255

#Chuyển nhãn sang one-hot encoding
y_train_epoch=to_categorical(yTrain)
y_test_epoch=to_categorical(yTest)
y_val_epoch=to_categorical(yVal)

#Tăng cường dữ liệu
from tensorflow.keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(

    brightness_range=(0.8, 1.2),
    rotation_range=90,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    vertical_flip=True,
    fill_mode='nearest'
)

#Xây dựng mô hình
model = Sequential()

model.add(Conv2D(32,(3,3),padding="same",activation="relu",input_shape=(32,32,3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(0.2))

model.add(Conv2D(64,(3,3), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(0.2))

model.add(Conv2D(128,(3,3), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(0.2))

model.add(Flatten())
model.add(Dense(256,activation="relu"))
#model.add(Dropout(0.5))
model.add(Dense(10,activation="softmax"))

model.summary()

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Define a new Sequential model
new_model = Sequential([
    Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu', padding='same'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu', padding='same'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Load weights from the specified path
weights_path = 'my_cifar10_model_weights.keras'
try:
    new_model.load_weights(weights_path)
    print(f"Loaded weights from {weights_path}.")
except FileNotFoundError:
    print(f"ERROR: Unable to find the weights file {weights_path}. Please check the file path.")
except Exception as e:
    print(f"ERROR: An error occurred while loading weights: {str(e)}")

# Compile the model
new_model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

# Print model summary to verify
new_model.summary()

model.compile( loss = 'categorical_crossentropy' ,
                   optimizer = 'adam' ,
                    metrics = [ 'accuracy' ]
)

from tensorflow.keras.callbacks import EarlyStopping

# Định nghĩa early stopping
early_stopping = EarlyStopping(monitor='val_accuracy', patience=5, restore_best_weights=True)

# Huấn luyện mô hình với early stopping
hist = model.fit(x_train, y_train_epoch,
                 batch_size=256,
                 epochs=100,
                 validation_data=(x_val, y_val_epoch),
                 callbacks=[early_stopping])

#Đánh giá mô hình
test_loss, test_acc = model.evaluate(x_test, y_test_epoch, verbose=1)

# Hiển thị kết quả
print('\nTest Accuracy: {:.2f}%'.format(test_acc * 100))

# Lưu toàn bộ mô hình theo định dạng được khuyến khích
model.save('my_cifar10_model.keras')
print("Mô hình đã được lưu dưới định dạng native Keras.")

import tensorflow as tf

# Đường dẫn tới file mô hình đã lưu
model_path = 'my_cifar10_model.keras'

# Tải mô hình
model = tf.keras.models.load_model(model_path)

plt.plot( hist.history[ 'accuracy' ] , color= 'g' )
plt.plot( hist.history[ 'val_accuracy' ] , color= 'r' )
plt.title( 'Model Accuracy' )
plt.ylabel( 'Accuracy' )
plt.xlabel( 'Epoch' )
plt.legend( [ 'Train' , 'Val' ] , loc= 'upper left' )
plt.show()

plt.plot( hist.history['loss'] , color= 'red' )
plt.plot( hist.history['val_loss'] , color= 'g')
plt.title( 'Model Loss' )
plt.ylabel( 'Loss' )
plt.xlabel( 'Epoch' )
plt.legend( ['Train' , 'Val'] , loc= 'upper right' )
plt.show()

new_image = plt.imread('sample_data/airplane1.jpg')

# Hiển thị hình ảnh gốc
plt.figure()
plt.imshow(new_image)
plt.title('Original Image')
plt.axis('off')
plt.show()

from skimage.transform import resize
resized_image = resize(new_image, (32, 32, 3))

# Hiển thị hình ảnh đã resize
plt.figure()
plt.imshow(resized_image)
plt.title('Resized Image')
plt.axis('off')
plt.show()

import numpy as np
predictions = model.predict(np.array([resized_image]))

# Sử dụng argmax để lấy lớp dự đoán
predicted_class = predictions.argmax()

# In thông tin ra theo 3 dòng
print('Dự đoán nhãn:', classification[predicted_class])